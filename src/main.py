#!/usr/bin/env python3
"""
MAIN - H·ªá th·ªëng Thu th·∫≠p v√† Ph√¢n t√≠ch D·ªØ li·ªáu THPT
ƒêi·ªÅu ph·ªëi c√°c module thu th·∫≠p, ph√¢n t√≠ch v√† t·∫°o b√°o c√°o

S·ª≠ d·ª•ng:
    python src/main.py --mode scrape --years 2020-2024
    python src/main.py --mode analyze
    python src/main.py --mode report
    python src/main.py --mode full
"""

import argparse
import logging
import sys
import os
from datetime import datetime

# Import c√°c module
from data_scraper import THPTDataScraper
from data_analyzer import THPTDataAnalyzer

# C·∫•u h√¨nh logging
def setup_logging():
    """C·∫•u h√¨nh logging cho to√†n b·ªô h·ªá th·ªëng"""
    log_format = '%(asctime)s - %(name)s - %(levelname)s - %(message)s'
    
    # T·∫°o th∆∞ m·ª•c logs
    os.makedirs("logs", exist_ok=True)
    
    # C·∫•u h√¨nh file log
    log_filename = f"logs/thpt_analysis_{datetime.now().strftime('%Y%m%d_%H%M%S')}.log"
    
    logging.basicConfig(
        level=logging.INFO,
        format=log_format,
        handlers=[
            logging.FileHandler(log_filename, encoding='utf-8'),
            logging.StreamHandler(sys.stdout)
        ]
    )
    
    logger = logging.getLogger(__name__)
    logger.info("Kh·ªüi ƒë·ªông h·ªá th·ªëng THPT Analysis")
    logger.info(f"Log file: {log_filename}")
    
    return logger

def parse_arguments():
    """Ph√¢n t√≠ch tham s·ªë d√≤ng l·ªánh"""
    parser = argparse.ArgumentParser(
        description="H·ªá th·ªëng Thu th·∫≠p v√† Ph√¢n t√≠ch D·ªØ li·ªáu THPT",
        formatter_class=argparse.RawDescriptionHelpFormatter,
        epilog="""
V√≠ d·ª• s·ª≠ d·ª•ng:
  python src/main.py --mode scrape --years 2020-2024
  python src/main.py --mode analyze  
  python src/main.py --mode report
  python src/main.py --mode full --years 2018-2024
  python src/main.py --mode visualize --charts all
        """
    )
    
    parser.add_argument(
        '--mode', 
        choices=['scrape', 'analyze', 'report', 'visualize', 'full'],
        required=True,
        help='Ch·∫ø ƒë·ªô ho·∫°t ƒë·ªông c·ªßa h·ªá th·ªëng'
    )
    
    parser.add_argument(
        '--years',
        type=str,
        default='2020-2024',
        help='Kho·∫£ng nƒÉm thu th·∫≠p d·ªØ li·ªáu (format: 2020-2024)'
    )
    
    parser.add_argument(
        '--charts',
        type=str,
        choices=['trends', 'comparison', 'distribution', 'all'],
        default='all',
        help='Lo·∫°i bi·ªÉu ƒë·ªì c·∫ßn t·∫°o'
    )
    
    parser.add_argument(
        '--output',
        type=str,
        default='output',
        help='Th∆∞ m·ª•c ƒë·∫ßu ra'
    )
    
    parser.add_argument(
        '--config',
        type=str,
        default='config/settings.json',
        help='File c·∫•u h√¨nh'
    )
    
    parser.add_argument(
        '--verbose', '-v',
        action='store_true',
        help='Hi·ªÉn th·ªã th√¥ng tin chi ti·∫øt'
    )
    
    return parser.parse_args()

def parse_year_range(year_str):
    """Ph√¢n t√≠ch chu·ªói nƒÉm th√†nh tuple"""
    try:
        if '-' in year_str:
            start, end = map(int, year_str.split('-'))
            return (start, end)
        else:
            year = int(year_str)
            return (year, year)
    except ValueError:
        raise ValueError(f"Format nƒÉm kh√¥ng h·ª£p l·ªá: {year_str}. S·ª≠ d·ª•ng format: 2020-2024 ho·∫∑c 2024")

def run_scrape_mode(args, logger):
    """Ch·∫°y ch·∫ø ƒë·ªô thu th·∫≠p d·ªØ li·ªáu"""
    logger.info("=== CH·∫†Y CH·ªÇ ƒê·ªò THU TH·∫¨P D·ªÆ LI·ªÜU ===")
    
    year_range = parse_year_range(args.years)
    logger.info(f"Thu th·∫≠p d·ªØ li·ªáu t·ª´ nƒÉm {year_range[0]} ƒë·∫øn {year_range[1]}")
    
    # Kh·ªüi t·∫°o scraper
    scraper = THPTDataScraper()
    
    # Thu th·∫≠p d·ªØ li·ªáu
    data = scraper.run_full_scrape(year_range=year_range)
    
    # In k·∫øt qu·∫£
    print(f"\n‚úÖ Ho√†n th√†nh thu th·∫≠p d·ªØ li·ªáu!")
    print(f"üìä T·ªï h·ª£p m√¥n: {len(data['to_hop_mon'])} b·∫£n ghi")
    print(f"üìà ƒêi·ªÉm chu·∫©n: {len(data['diem_chuan'])} b·∫£n ghi")
    print(f"üìâ Ph·ªï ƒëi·ªÉm: {len(data['pho_diem'])} b·∫£n ghi")
    print(f"üíæ D·ªØ li·ªáu ƒë√£ l∆∞u trong th∆∞ m·ª•c data/")
    
    return data

def run_analyze_mode(args, logger):
    """Ch·∫°y ch·∫ø ƒë·ªô ph√¢n t√≠ch d·ªØ li·ªáu"""
    logger.info("=== CH·∫†Y CH·ªÇ ƒê·ªò PH√ÇN T√çCH D·ªÆ LI·ªÜU ===")
    
    # Ki·ªÉm tra file database
    db_path = "data/thpt_data.db"
    if not os.path.exists(db_path):
        logger.error(f"Kh√¥ng t√¨m th·∫•y file database: {db_path}")
        print("‚ùå L·ªói: Ch∆∞a c√≥ d·ªØ li·ªáu ƒë·ªÉ ph√¢n t√≠ch!")
        print("üí° Ch·∫°y l·ªánh: python src/main.py --mode scrape tr∆∞·ªõc")
        return None
    
    # Kh·ªüi t·∫°o analyzer
    analyzer = THPTDataAnalyzer(db_path=db_path)
    
    # Ch·∫°y ph√¢n t√≠ch
    results, report = analyzer.run_full_analysis()
    
    # In k·∫øt qu·∫£
    print(f"\n‚úÖ Ho√†n th√†nh ph√¢n t√≠ch d·ªØ li·ªáu!")
    print(f"üìã S·ªë ph√¢n t√≠ch: {len(results)}")
    print(f"üìÅ K·∫øt qu·∫£ l∆∞u trong: output/")
    print(f"üìë B√°o c√°o t·ªïng quan: output/reports/summary_report.md")
    
    return results, report

def run_report_mode(args, logger):
    """Ch·∫°y ch·∫ø ƒë·ªô t·∫°o b√°o c√°o chi ti·∫øt"""
    logger.info("=== CH·∫†Y CH·ªÇ ƒê·ªò T·∫†O B√ÅO C√ÅO ===")
    
    # Ki·ªÉm tra c√°c file ph√¢n t√≠ch
    required_files = [
        "output/tables/to_hop_popularity.csv",
        "output/tables/diem_chuan_trends.csv",
        "output/tables/difficulty_ranking.csv"
    ]
    
    missing_files = [f for f in required_files if not os.path.exists(f)]
    if missing_files:
        logger.error(f"Thi·∫øu file ph√¢n t√≠ch: {missing_files}")
        print("‚ùå L·ªói: Ch∆∞a c√≥ k·∫øt qu·∫£ ph√¢n t√≠ch!")
        print("üí° Ch·∫°y l·ªánh: python src/main.py --mode analyze tr∆∞·ªõc")
        return None
    
    # T·∫°o b√°o c√°o chi ti·∫øt
    logger.info("T·∫°o b√°o c√°o chi ti·∫øt...")
    
    # ƒê·ªçc c√°c file k·∫øt qu·∫£
    import pandas as pd
    
    popularity = pd.read_csv("output/tables/to_hop_popularity.csv")
    trends = pd.read_csv("output/tables/diem_chuan_trends.csv")
    difficulty = pd.read_csv("output/tables/difficulty_ranking.csv")
    
    # T·∫°o b√°o c√°o HTML
    html_report = f"""
    <!DOCTYPE html>
    <html>
    <head>
        <meta charset="UTF-8">
        <title>B√°o c√°o Ph√¢n t√≠ch THPT</title>
        <style>
            body {{ font-family: Arial, sans-serif; margin: 40px; }}
            h1 {{ color: #2c3e50; }}
            h2 {{ color: #34495e; }}
            table {{ border-collapse: collapse; width: 100%; margin: 20px 0; }}
            th, td {{ border: 1px solid #ddd; padding: 8px; text-align: left; }}
            th {{ background-color: #f2f2f2; }}
            .highlight {{ background-color: #fff3cd; }}
        </style>
    </head>
    <body>
        <h1>üìä B√°o c√°o Ph√¢n t√≠ch D·ªØ li·ªáu THPT</h1>
        <p><strong>Ng√†y t·∫°o:</strong> {datetime.now().strftime('%d/%m/%Y %H:%M')}</p>
        
        <h2>üéØ ƒê·ªô ph·ªï bi·∫øn t·ªï h·ª£p m√¥n</h2>
        {popularity.to_html(index=False, table_id="popularity")}
        
        <h2>üìà X·∫øp h·∫°ng ƒë·ªô kh√≥</h2>
        {difficulty[['ma_to_hop', 'muc_do_kho', 'hang_do_kho']].to_html(index=False, table_id="difficulty")}
        
        <h2>üîç Ph√¢n t√≠ch chi ti·∫øt</h2>
        <p>C√°c file ph√¢n t√≠ch chi ti·∫øt ƒë√£ ƒë∆∞·ª£c l∆∞u trong th∆∞ m·ª•c <code>output/tables/</code></p>
        
        <hr>
        <p><em>B√°o c√°o ƒë∆∞·ª£c t·∫°o b·ªüi THPT Analysis System</em></p>
    </body>
    </html>
    """
    
    # L∆∞u b√°o c√°o HTML
    with open("output/reports/detailed_report.html", "w", encoding='utf-8') as f:
        f.write(html_report)
    
    print(f"\n‚úÖ Ho√†n th√†nh t·∫°o b√°o c√°o!")
    print(f"üìÑ B√°o c√°o HTML: output/reports/detailed_report.html")
    print(f"üìã B√°o c√°o Markdown: output/reports/summary_report.md")
    
    return html_report

def run_full_mode(args, logger):
    """Ch·∫°y to√†n b·ªô quy tr√¨nh"""
    logger.info("=== CH·∫†Y QUY TR√åNH ƒê·∫¶Y ƒê·ª¶ ===")
    
    print("üöÄ B·∫Øt ƒë·∫ßu quy tr√¨nh ph√¢n t√≠ch THPT ƒë·∫ßy ƒë·ªß...")
    
    # 1. Thu th·∫≠p d·ªØ li·ªáu
    print("\nüì• B∆∞·ªõc 1: Thu th·∫≠p d·ªØ li·ªáu")
    data = run_scrape_mode(args, logger)
    
    # 2. Ph√¢n t√≠ch d·ªØ li·ªáu  
    print("\nüîç B∆∞·ªõc 2: Ph√¢n t√≠ch d·ªØ li·ªáu")
    results, report = run_analyze_mode(args, logger)
    
    # 3. T·∫°o b√°o c√°o
    print("\nüìä B∆∞·ªõc 3: T·∫°o b√°o c√°o")
    html_report = run_report_mode(args, logger)
    
    print(f"\nüéâ Ho√†n th√†nh to√†n b·ªô quy tr√¨nh!")
    print(f"üìÅ T·∫•t c·∫£ k·∫øt qu·∫£ trong th∆∞ m·ª•c: output/")
    
    return {
        'data': data,
        'analysis': results,
        'reports': {
            'markdown': report,
            'html': html_report
        }
    }

def main():
    """H√†m ch√≠nh"""
    # C·∫•u h√¨nh logging
    logger = setup_logging()
    
    try:
        # Ph√¢n t√≠ch tham s·ªë
        args = parse_arguments()
        
        if args.verbose:
            logging.getLogger().setLevel(logging.DEBUG)
        
        logger.info(f"Ch·∫ø ƒë·ªô: {args.mode}")
        logger.info(f"Tham s·ªë: {vars(args)}")
        
        # Ch·∫°y theo ch·∫ø ƒë·ªô
        if args.mode == 'scrape':
            result = run_scrape_mode(args, logger)
            
        elif args.mode == 'analyze':
            result = run_analyze_mode(args, logger)
            
        elif args.mode == 'report':
            result = run_report_mode(args, logger)
            
        elif args.mode == 'full':
            result = run_full_mode(args, logger)
            
        else:
            logger.error(f"Ch·∫ø ƒë·ªô kh√¥ng h·ª£p l·ªá: {args.mode}")
            return 1
        
        if result is None:
            logger.error("Th·ª±c thi th·∫•t b·∫°i")
            return 1
        
        logger.info("Th·ª±c thi th√†nh c√¥ng")
        return 0
        
    except KeyboardInterrupt:
        logger.info("Ng∆∞·ªùi d√πng d·ª´ng ch∆∞∆°ng tr√¨nh")
        return 1
        
    except Exception as e:
        logger.error(f"L·ªói kh√¥ng mong mu·ªën: {e}", exc_info=True)
        return 1

if __name__ == "__main__":
    exit_code = main()
    sys.exit(exit_code)
